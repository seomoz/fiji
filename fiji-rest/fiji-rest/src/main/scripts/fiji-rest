#!/bin/bash
# -*- coding: utf-8 -*-
# -*- mode: shell -*-

[ ! -z "$DEBUG" ] && set -x

#
# (c) Copyright 2013 WibiData, Inc.
#
# See the NOTICE file distributed with this work for additional
# information regarding copyright ownership.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Launches the fiji-rest process
#
# Usage:
#   fiji-rest start|stop|status|restart
#
# Environment variables:
#  - PIDFILE: optional explicit path of the file where to write the PID
#        of the FijiREST server.
#  - FIJI_REST_CONF_DIR: optional path of the directory containing the
#        configuration of the FijiREST server.
#  - FIJI_REST_LOGS_DIR: optional path of the directory containing the
#        log files.
#  - FIJI_REST_JAVA_ARGUMENTS: extra JVM arguments,
#        eg. -Dproperty=value or -Xmx2G, etc.

RETVAL=0
SLEEP_TIME=5

DESC="FijiREST"

initializeDirectories() {
  # attempt to find java (stolen from bigtop)
  if [ -z "$JAVA_HOME" ]; then
    for candidate in \
      /usr/lib/jvm/java-6-sun \
      /usr/lib/jvm/java-1.6.0-sun-1.6.0.*/jre/ \
      /usr/lib/jvm/java-1.6.0-sun-1.6.0.* \
      /usr/lib/jvm/j2sdk1.6-oracle \
      /usr/lib/jvm/j2sdk1.6-oracle/jre \
      /usr/lib/j2sdk1.6-sun \
      /usr/java/jdk1.6* \
      /usr/java/jre1.6* \
      /Library/Java/Home \
      /usr/java/default \
      /usr/lib/jvm/default-java \
      /usr/lib/jvm/java-openjdk \
      /usr/lib/jvm/jre-openjdk \
      /usr/lib/jvm/java-1.6.0-openjdk-1.6.* \
      /usr/lib/jvm/jre-1.6.0-openjdk* ; do
      if [ -e "$candidate/bin/java" ]; then
        export JAVA_HOME="${candidate}"
        break
      fi
    done
  fi

  if [ -z "$JAVA_HOME" ]; then
    echo "\$JAVA_HOME not set."
    exit 1
  fi

  if [ -z "$FIJI_REST_HOME" ]; then
    # If FIJI_REST_HOME is not set, then infer that it is the working directory.
    cd $(dirname $0)/../
    FIJI_REST_HOME="$PWD"
  fi

  echo "FIJI_REST_HOME set to $FIJI_REST_HOME"

  if [ -z "$PIDFILE" ]; then
    PIDFILE="${FIJI_REST_HOME}/fiji-rest.pid"
  fi

  echo "PIDFILE set to $PIDFILE"

  # Sort the lib/* so that we get a predictable order of the classpath to ensure
  # a consistent loading behavior by default in various environments (else
  # you can get weird class masking behavior and possible classpath collisions if you have
  # two jars by mistake with duplicate classes.)
  fiji_rest_lib_cp=$(ls ${FIJI_REST_HOME}/lib/* | sort | tr "\n" ":")
  fiji_rest_cp="${fiji_rest_lib_cp}:${FIJI_CLASSPATH}"

  # Finds conf dir and adds to classpath.
  if [ -z "${FIJI_REST_CONF_DIR}" ]; then
    FIJI_REST_CONF_DIR="${FIJI_REST_HOME}/conf"
  elif [ ! -d "${FIJI_REST_CONF_DIR}" ]; then
    echo "FIJI_REST_CONF_DIR ($FIJI_REST_CONF_DIR) does not exist."
    exit 1
  fi

  if [ -d "${FIJI_REST_CONF_DIR}" ]; then
    fiji_rest_cp="${fiji_rest_cp}:${FIJI_REST_CONF_DIR}"
  fi

  echo "FIJI_REST_CONF_DIR set to ${FIJI_REST_CONF_DIR}"

  # Finds logs dir and adds to classpath.
  # Creates if not there.
  if [ -z "${FIJI_REST_LOGS_DIR}" ]; then
    FIJI_REST_LOGS_DIR=${FIJI_REST_HOME}/logs
  elif [ ! -d "${FIJI_REST_LOGS_DIR}" ]; then
    mkdir -p ${FIJI_REST_LOGS_DIR}
  fi
  # FIJI_REST_LOGS_DIR was specified and location exists.
  # Override Dropwizard logging settings.
  LOGGING_OVERRIDE_OPTS="-Ddw.http.requestLog.file.currentLogFilename=${FIJI_REST_LOGS_DIR}/requests.log \
    -Ddw.http.requestLog.file.archivedLogFilenamePattern=${FIJI_REST_LOGS_DIR}/requests-%d.log.gz \
    -Ddw.logging.file.currentLogFilename=${FIJI_REST_LOGS_DIR}/app.log \
    -Ddw.logging.file.archivedLogFilenamePattern=${FIJI_REST_LOGS_DIR}/app-%d.log.gz"

  echo "FIJI_REST_LOGS_DIR set to $FIJI_REST_LOGS_DIR"

  console_log=${FIJI_REST_LOGS_DIR}/console.out
  # Export the classpath environment variable so that we don't have this mass of jars on the -cp line
  # when starting up Java.
  export CLASSPATH=${CLASSPATH}:${fiji_rest_cp}
}

function checkStatusOfProc(){
  # Check that the process itself is there.
  if [ -e "${PIDFILE}" ]; then
    PID=$(cat "${PIDFILE}")
    ps "${PID}" > /dev/null 2>&1
    if [ $? == 0 ]; then
      echo "${DESC} is running. PID is ${PID}"
    else
      echo "${DESC} is not running."
    fi
    return 0
  else
    echo "${DESC} is not running."
    return 1
  fi
}

archivelogs() {
  mkdir -p "${FIJI_REST_LOGS_DIR}/archives"

  echo "Archiving old logs"
  date=$(date +%Y%m%d%S)
  for log_file in $(find "${FIJI_REST_LOGS_DIR}" -maxdepth 1 -type f); do
    base_log=$(basename "${log_file}")
    mv "${log_file}" "${FIJI_REST_LOGS_DIR}/archives/${base_log}.${date}"
  done
}

startBackground() {
  archivelogs

  echo "Starting ${DESC}"
  # Do not quote LOGGING_OVERRIDE_OPTS and FIJI_REST_JAVA_ARGUMENTS,
  # but instead expand these arguments in the java command-line:
  "${JAVA_HOME}/bin/java" \
      ${LOGGING_OVERRIDE_OPTS} \
      ${FIJI_REST_JAVA_ARGUMENTS} \
      org.fiji.rest.FijiRESTService server \
      "${FIJI_REST_CONF_DIR}/configuration.yml" \
      > "${console_log}" 2>&1 &

  echo $! > $PIDFILE

  #Check that the server came up properly
  for second in {0..30}; do
    checkStatusOfProc
    RETVAL=$?
    if [ ${RETVAL} == 0 ]; then
      break
    fi
    sleep 2
  done

  if [ -e "${PIDFILE}" ]; then
    echo "PID saved to ${PIDFILE}"
  fi

  return 0
}

startForeground() {
  archivelogs

  # Forcibly enable logging to console
  LOGGING_OVERRIDE_OPTS="${LOGGING_OVERRIDE_OPTS} -Ddw.logging.console.enabled=true"

  echo "Starting ${DESC}"
  # Do not quote LOGGING_OVERRIDE_OPTS and FIJI_REST_JAVA_ARGUMENTS,
  # but instead expand these arguments in the java command-line:
  exec "${JAVA_HOME}/bin/java" \
      ${LOGGING_OVERRIDE_OPTS} \
      ${FIJI_REST_JAVA_ARGUMENTS} \
      org.fiji.rest.FijiRESTService server \
      "${FIJI_REST_CONF_DIR}/configuration.yml"
}

stop() {
  echo "Stopping ${DESC}: "

  if [ ! -e "${PIDFILE}" ]; then
    echo "${PIDFILE} not found."
    return 1
  fi

  pid=$(cat "${PIDFILE}")
  kill $pid
  for second in {5..0}; do
    retval=checkStatusOfProc
    if [ ${retval} != 0 ] ; then
      break
    fi
    sleep 2
  done

  if [ ${retval} == 0 ]; then
    echo "Force killing ${DESC} PID = ${pid}"
    kill -9 ${pid}
  fi
  rm -f "${PIDFILE}"
  return 0
}

checkstatus(){
  checkStatusOfProc
}

restart() {
  echo "About to restart ${DESC}"
  stop
  startBackground
}

service() {
  case "$1" in
    start)
      startBackground
      ;;
    stop)
      stop
      ;;
    status)
      checkstatus
      ;;
    restart)
      restart
      ;;
    foreground)
      startForeground
      ;;
    *)
      echo $"Usage: $0 {start|stop|status|restart|foreground}"
      exit 1
  esac
}

initializeDirectories
service "$1"
RETVAL=$?
exit $RETVAL
