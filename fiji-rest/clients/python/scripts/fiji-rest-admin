#!/usr/bin/env python3
# -*- mode: python -*-
# -*- coding: utf-8 -*-

# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""CLI admin interface to the FijiRest server. """

import os

from base import base

from fiji.rest import fiji_rest


FLAGS = base.FLAGS


def GetFijiRestHome():
  """Locates the installation directory of FijiREST.

  Returns:
    The installation directory of FijiREST.
  Raises:
    AssertionError: if FijiREST cannot be found.
  """
  rest_home = os.environ.get('FIJI_REST_HOME')
  if rest_home is not None:
    return os.path.abspath(rest_home)
  fiji_home = os.environ.get('FIJI_HOME')
  if fiji_home is not None:
    return os.path.join(os.path.abspath(fiji_home), 'rest')
  return '.'


_FIJI_REST_HOME = GetFijiRestHome()


FLAGS.AddString(
    name='fiji_rest_home',
    default=_FIJI_REST_HOME,
    help='Path of the FijiREST installation directory.',
)

FLAGS.AddString(
    name='conf_dir',
    default=os.path.join(_FIJI_REST_HOME, 'conf'),
    help='Path of the FijiREST configuration directory.',
)

FLAGS.AddString(
    name='logs_dir',
    default=os.path.join(_FIJI_REST_HOME, 'logs'),
    help='Directory where FijiREST writes log files.',
)

FLAGS.AddString(
    name='pid_file_path',
    default=os.path.join(_FIJI_REST_HOME, 'fiji-rest.pid'),
    help='Path of the PID file for the FijiREST process.',
)

FLAGS.AddString(
    name='jars',
    default=None,
    help='Optional comma-separated list of extra JAR file paths.',
)

FLAGS.AddString(
    name='jvm_args',
    default=None,
    help='Optional extra JVM arguments.',
)


def Main(args):
  base.MakeDir(FLAGS.logs_dir)

  jars = []
  if FLAGS.jars is not None:
    jars = FLAGS.jars.split(',')

  fiji_rest_path = os.path.join(FLAGS.fiji_rest_home, 'bin', 'fiji-rest')
  assert os.path.exists(fiji_rest_path), \
      ('FijiREST binary not found in %s, '
       'please set --fiji-rest-home=... '
       'or export FIJI_REST_HOME=... '
       'or export FIJI_HOME=...' % fiji_rest_path)

  rest_server = fiji_rest.FijiRestServer(
      fiji_rest_path = fiji_rest_path,
      logs_dir = FLAGS.logs_dir,
      pid_file_path = FLAGS.pid_file_path,
      conf_dir = FLAGS.conf_dir,
      jar_paths = jars,
      jvm_args = FLAGS.jvm_args or tuple(),
  )

  cli_handler = fiji_rest.FijiRestServerCLI(
      rest_server=rest_server,
      parent_flags=FLAGS,
  )
  return cli_handler(args)


if __name__ == '__main__':
  base.Run(Main)
