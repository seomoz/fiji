#!/bin/bash --posix
#
#   (c) Copyright 2013 WibiData, Inc.
#
#   See the NOTICE file distributed with this work for additional
#   information regarding copyright ownership.
#
#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.

# Identify the bin dir in the distribution from which this script is running.
bin=`dirname $0`
bin=`cd ${bin} && pwd`

# Set the directory where libraries for Fiji shell live.
KIJI_SCHEMA_SHELL_LIB_DIR="${bin}/../lib/"
# Set the directory where configuration files for Fiji shell live.
KIJI_SCHEMA_SHELL_CONF_DIR="${bin}/../conf/"
# Set the main class used to run the custom fiji-schema-shell
MAIN_CLASS="com.moz.fiji.schema.shell.ShellMain"

# Not sure what the right default is here: trying nonzero.
scala_exit_status=127
saved_stty=""

# restore stty settings (echo in particular)
function restoreSttySettings() {
  if [[ -n $SCALA_RUNNER_DEBUG ]]; then
    echo "restoring stty: $saved_stty"
  fi

  stty $saved_stty
  saved_stty=""
}

function onExit() {
  if [[ "$saved_stty" != "" ]]; then
    restoreSttySettings
    exit $scala_exit_status
  fi
}

# to reenable echo if we are interrupted before completing.
trap onExit INT

# save terminal settings
saved_stty=$(stty -g 2>/dev/null)
# clear on error so we don't later try to restore them
if [[ ! $? ]]; then
  saved_stty=""
fi
if [[ -n $SCALA_RUNNER_DEBUG ]]; then
  echo "saved stty: $saved_stty"
fi

cygwin=false;
case "`uname`" in
    CYGWIN*) cygwin=true ;;
esac

# Constructing Fiji Shell classpath.
KIJI_SCHEMA_SHELL_CLASSPATH=""
# Add files in conf dir to Fiji shell classpath.
for ext in "$KIJI_SCHEMA_SHELL_CONF_DIR"/* ; do
    if [ -z "$KIJI_SCHEMA_SHELL_CLASSPATH" ] ; then
        KIJI_SCHEMA_SHELL_CLASSPATH="$ext"
    else
        KIJI_SCHEMA_SHELL_CLASSPATH="$KIJI_SCHEMA_SHELL_CLASSPATH:$ext"
    fi
done
# Add entries in lib dir.
for ext in "$KIJI_SCHEMA_SHELL_LIB_DIR"/* ; do
    if [ -z "$KIJI_SCHEMA_SHELL_CLASSPATH" ] ; then
        KIJI_SCHEMA_SHELL_CLASSPATH="$ext"
    else
        KIJI_SCHEMA_SHELL_CLASSPATH="$KIJI_SCHEMA_SHELL_CLASSPATH:$ext"
    fi
done

CYGWIN_JLINE_TERMINAL=
if $cygwin; then
    if [ "$OS" = "Windows_NT" ] && cygpath -m .>/dev/null 2>/dev/null ; then
        format=mixed
    else
        format=windows
    fi
    KIJI_SCHEMA_SHELL_CLASSPATH=`cygpath --path --$format "$KIJI_SCHEMA_SHELL_CLASSPATH"`
    case "$TERM" in
        rxvt* | xterm*)
            stty -icanon min 1 -echo
            CYGWIN_JLINE_TERMINAL="-Djline.terminal=scala.tools.jline.UnixTerminal"
        ;;
    esac
fi

[ -n "$JAVA_OPTS" ] || JAVA_OPTS="-Xmx256M -Xms32M"

# This is a workaround for OS X Lion, where a bug in JRE 1.6
# creates a lot of 'SCDynamicStore' errors.
if [ `uname` = "Darwin" ]; then
    JAVA_OPTS="$JAVA_OPTS -Djava.security.krb5.realm= -Djava.security.krb5.kdc="
fi

# break out -D and -J options and add them to JAVA_OPTS as well
# so they reach the underlying JVM in time to do some good.  The
# -D options will be available as system properties.
declare -a java_args
declare -a scala_args


while [ $# -gt 0 ]; do
  case "$1" in
    -D*)
      # pass to scala as well: otherwise we lose it sometimes when we
      # need it, e.g. communicating with a server compiler.
      java_args=("${java_args[@]}" "$1")
      scala_args=("${scala_args[@]}" "$1")
      shift
      ;;
    -J*)
      # as with -D, pass to scala even though it will almost
      # never be used.
      java_args=("${java_args[@]}" "${1:2}")
      scala_args=("${scala_args[@]}" "$1")
      shift
      ;;
    -toolcp)
      TOOL_CLASSPATH="$TOOL_CLASSPATH:$2"
      shift 2
      ;;
    *)
      scala_args=("${scala_args[@]}" "$1")
      shift
      ;;
  esac
done

# reset "$@" to the remaining args
set -- "${scala_args[@]}"

if [ -z "$JAVACMD" -a -n "$JAVA_HOME" -a -x "$JAVA_HOME/bin/java" ]; then
    JAVACMD="$JAVA_HOME/bin/java"
fi

if [ -z "$KIJICMD" ]; then
    # If the fiji script command is not defined look for it.
    if [ -z "$KIJICMD" -a -n "$KIJI_HOME" -a -x "$KIJI_HOME/bin/fiji" ]; then
        # If KIJI_HOME is set, check it for the fiji script.
        KIJICMD="$KIJI_HOME/bin/fiji"
    elif [ -z "$KIJI_HOME" -a -x "${bin}/../../bin/fiji" ]; then
        # If KIJI_HOME is not set, we might be running inside a bundled
        # fiji distribution. Check two levels up for bin/fiji.
        KIJICMD="${bin}/../../bin/fiji"
    else
        echo "To run Fiji DDL Shell the environment variable KIJI_HOME must be set and must point to "
        echo "the root directory of a Fiji distribution."
        exit 1
    fi
fi
KIJI_CLASSPATH=`$KIJICMD classpath`

"${JAVACMD:=java}" \
  $JAVA_OPTS \
  "${java_args[@]}" \
  -classpath "${TOOL_CLASSPATH}:${KIJI_CLASSPATH}:${KIJI_SCHEMA_SHELL_CLASSPATH}" \
  -Dscala.usejavacp=true \
  -Denv.emacs="$EMACS" \
  $CYGWIN_JLINE_TERMINAL \
  $MAIN_CLASS  "$@"

# record the exit status lest it be overwritten:
# then reenable echo and propagate the code.
scala_exit_status=$?
onExit
