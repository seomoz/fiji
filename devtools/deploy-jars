#! /bin/bash

# Die on error, even in pipes
set -e -o pipefail

# Create jars suitable for uploading Fiji to the Maven central repository at
# https://oss.sonatype.org/

# ASSUMPTIONS:
# 1. You have built Fiji.
# 2. You are running this script from the project root directory.
# 3. You have gpg installed and configured

# http://central.sonatype.org/pages/manual-staging-bundle-creation-and-deployment.html

cat > /tmp/things-we-care-about <<'EOF'
com/moz/fiji/annotations/annotations/
com/moz/fiji/checkin/fiji-checkin/
com/moz/fiji/common/fiji-common-flags/
com/moz/fiji/commons/fiji-commons-java/
com/moz/fiji/deps/jackson/
com/moz/fiji/delegation/fiji-delegation/
com/moz/fiji/mapreduce/cdh5-mrbridge/
com/moz/fiji/mapreduce/fiji-mapreduce-avro-lib/
com/moz/fiji/mapreduce/fiji-mapreduce/
com/moz/fiji/mapreduce/platform-api/
com/moz/platforms/cdh5.0-platform/
com/moz/platforms/cdh5.1-platform/
com/moz/platforms/cdh5.2-platform/
com/moz/platforms/cdh5.3-platform/
com/moz/platforms/compile-platform/
com/moz/fiji/schema/cdh5-bridge/
com/moz/fiji/schema/fiji-schema-avro/
com/moz/fiji/schema/fiji-schema-extras/
com/moz/fiji/schema/fiji-schema-shell-lib/
com/moz/fiji/schema/fiji-schema/
com/moz/fiji/schema/schema-platform-api/
EOF

date
gpg --version

root=$(pwd)
version=$(<FIJI_VERSION)

find "${root}/output/maven_repository" -name '*.pom' | \
grep "/${version}/" | \
xargs grep -l '<groupId>com.moz.fiji' | \
grep -f /tmp/things-we-care-about | \
sort | \
while read f
do
  d=$(dirname $f)
  base=$(basename $f | sed 's|\.pom$||')

  cd $d

  main_jar="${base}.jar"
  sources_jar="${base}-sources.jar"
  javadoc_jar="${base}-javadoc.jar"

  # No artifact? don't try to deploy it
  if ! test -f "${main_jar}"
  then
    continue
  fi

  echo "======================================================================"
  echo "Deploying: $d"
  echo "======================================================================"

  main_dir=$(mktemp -d)
  cp "${main_jar}" $main_dir/

  # https://github.com/making/travis-ci-maven-deploy-skelton
  $root/bin/fiji-maven gpg:sign-and-deploy-file \
    --settings $root/devtools/settings.xml \
    -DrepositoryId=ossrh \
    -Dpackaging=jar \
    -DretryFailedDeploymentCount=10 \
    -Dgpg.executable=gpg \
    -Dgpg.ascDirectory="$main_dir" \
    -Dgpg.homedir="$main_dir" \
    -Dgpg.keyname="${GPG_KEYNAME}" \
    -Dgpg.passphrase="${GPG_PASSPHRASE}" \
    -Dgpg.defaultKeyring=false \
    -Dgpg.publicKeyring="${TRAVIS_BUILD_DIR}/devtools/pubring.gpg" \
    -Dgpg.secretKeyring="${TRAVIS_BUILD_DIR}/devtools/secring.gpg" \
    -Durl=https://oss.sonatype.org/service/local/staging/deploy/maven2/ \
    -DpomFile=${base}.pom \
    -Dfile="$main_dir/${main_jar}" \
    | grep -v "with value '\*' does not match a valid id pattern" &

  sleep 1

  # Synthesize if necessary
  if ! test -f "${sources_jar}"
  then
    jar -cf "${sources_jar}" $f
  fi

  sources_dir=$(mktemp -d)
  cp "${sources_jar}" $sources_dir/

  $root/bin/fiji-maven gpg:sign-and-deploy-file \
    --settings $root/devtools/settings.xml \
    -DrepositoryId=ossrh \
    -Dpackaging=jar \
    -DretryFailedDeploymentCount=10 \
    -Dgpg.executable=gpg \
    -Dgpg.ascDirectory="$sources_dir" \
    -Dgpg.homedir="$sources_dir" \
    -Dgpg.keyname="${GPG_KEYNAME}" \
    -Dgpg.passphrase="${GPG_PASSPHRASE}" \
    -Dgpg.defaultKeyring=false \
    -Dgpg.publicKeyring="${TRAVIS_BUILD_DIR}/devtools/pubring.gpg" \
    -Dgpg.secretKeyring="${TRAVIS_BUILD_DIR}/devtools/secring.gpg" \
    -Durl=https://oss.sonatype.org/service/local/staging/deploy/maven2/ \
    -DpomFile=${base}.pom \
    -Dfile="$sources_dir/${sources_jar}" \
    -Dclassifier=sources \
    | grep -v "with value '\*' does not match a valid id pattern" &

  sleep 1

  # Synthesize if necessary
  if ! test -f "${javadoc_jar}"
  then
    jar -cf "${javadoc_jar}" $f
  fi

  javadoc_dir=$(mktemp -d)
  cp "${javadoc_jar}" $javadoc_dir/

  $root/bin/fiji-maven gpg:sign-and-deploy-file \
    --settings $root/devtools/settings.xml \
    -DrepositoryId=ossrh \
    -Dpackaging=jar \
    -DretryFailedDeploymentCount=10 \
    -Dgpg.executable=gpg \
    -Dgpg.ascDirectory="$javadoc_dir" \
    -Dgpg.homedir="$javadoc_dir" \
    -Dgpg.keyname="${GPG_KEYNAME}" \
    -Dgpg.passphrase="${GPG_PASSPHRASE}" \
    -Dgpg.defaultKeyring=false \
    -Dgpg.publicKeyring="${TRAVIS_BUILD_DIR}/devtools/pubring.gpg" \
    -Dgpg.secretKeyring="${TRAVIS_BUILD_DIR}/devtools/secring.gpg" \
    -Durl=https://oss.sonatype.org/service/local/staging/deploy/maven2/ \
    -DpomFile=${base}.pom \
    -Dfile="$javadoc_dir/${javadoc_jar}" \
    -Dclassifier=javadoc \
    | grep -v "with value '\*' does not match a valid id pattern" &

  sleep 1

  while (( $(jobs -p | wc -l) > 6 ))
  do
    wait -n
  done
done

wait

cd $root

# Releasing has an entirely separate security mechanism (for the same passwords.)
# Set it up.  We don't care about the master pass at all, since we still rely on
# the (travis-)encrypted env vars for the actual security.

sed "s|MASTER_PASSORD|$($root/bin/fiji-maven -emp $RANDOM)|g" \
  $root/devtools/settings-security.xml.template \
  > $root/devtools/settings-security.xml

encrypted_sonatype_username=$($root/bin/fiji-maven \
  -Dsettings.security=$root/devtools/settings-security.xml \
  -ep "$SONATYPE_USERNAME")

encrypted_sonatype_password=$($root/bin/fiji-maven \
  -Dsettings.security=$root/devtools/settings-security.xml \
  -ep "$SONATYPE_PASSWORD")

sed \
  -e "s|SONATYPE_USERNAME|$encrypted_sonatype_username|g" \
  -e "s|SONATYPE_PASSWORD|$encrypted_sonatype_password|g" \
  $root/devtools/encrypted-settings.xml.template \
  > $root/devtools/encrypted-settings.xml

# TODO(phs): this whines and blows up.  I'm done.  Turning it off so the github releases
# deploy can run.  Deployment to maven central requires one to manually:
# 1. Log into https://oss.sonatype.org/
# 2. Go to "Staging Repositories"
# 3. Select the "commoz-xxxx" entry in the bottom of the list
# 4. Press the "Close" button
# 5. Wait a minute and press "Refresh" (not your browser refresh)
# 6. Select the same item and press "Release"

# The error:
# [INFO]  + Using server credentials "ossrh" from Maven settings.
# [INFO]  * Connected to Nexus at https://oss.sonatype.org:443/, is version 2.13.0-01 and edition "Professional"
# [INFO] We have nothing locally staged, bailing out.
# [INFO] ------------------------------------------------------------------------
# [INFO] BUILD FAILURE
# [INFO] ------------------------------------------------------------------------
# [INFO] Total time: 7.394s
# [INFO] Finished at: Wed Jul 06 21:43:05 UTC 2016
# [INFO] Final Memory: 17M/178M
# [INFO] ------------------------------------------------------------------------
# [ERROR] Failed to execute goal org.sonatype.plugins:nexus-staging-maven-plugin:1.6.7:release (default-cli) on project fiji-schema: The staging repository to operate against is not defined! (use "-DstagingRepositoryId=foo1,foo2" on CLI) -> [Help 1]
# [ERROR]
# [ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch.
# [ERROR] Re-run Maven using the -X switch to enable full debug logging.
# [ERROR]
# [ERROR] For more information about the errors and possible solutions, please read the following articles:
# [ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/MojoExecutionException

# It needs a pom for some reason
# $root/bin/fiji-maven org.sonatype.plugins:nexus-staging-maven-plugin:release \
#   --file $root/fiji-schema/fiji-schema/pom.xml \
#   --settings $root/devtools/encrypted-settings.xml \
#   -Dsettings.security=$root/devtools/settings-security.xml \
#   -DserverId=ossrh \
#   -DnexusUrl=https://oss.sonatype.org/ \
#   -DautoReleaseAfterClose=true
