#!/bin/bash --posix
#
#   (c) Copyright 2013 WibiData, Inc.
#
#   See the NOTICE file distributed with this work for additional
#   information regarding copyright ownership.
#
#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.
#
# Provides an entry point for running a FijiExpress-specific Scala shell.

# Identify the bin dir in the distribution from which this script is running.
bin=$(dirname $0)
bin=$(cd ${bin} && pwd)

# Set the main class used to run the FijiExpress Scala REPL.
main_class="org.fiji.express.repl.ExpressShell"

# This script should be run from the express script, which should export an environment variable
# named EXPRESS_CP
if [[ -z "${EXPRESS_CP}" ]]; then
  echo "The environment variable EXPRESS_CP is undefined."
  echo "If you are trying to run the FijiExpress shell, use the express command to do so."
fi

# It should also export TMPJARS, which should contain a comma-separated list of paths to jars
# to add to the distributed cache of run jobs.
if [[ -z "${TMPJARS}" ]]; then
  echo "The environment variable TMPJARS is undefined."
  echo "If you are trying to run the FijiExpress shell, use the express command to do so."
fi

# It should also export EXPRESS_MODE, which should be the path to a script of Scala code the
# REPL should preload so that Hadoop jobs execute in the Cascading local runner or a Hadoop
# cluster.
if [[ -z "${EXPRESS_MODE}" ]]; then
  echo "The environment variable EXPRESS_MODE is undefined."
  echo "If you are trying to run the FijiExpress shell, use the express command to do so."
fi

# There should be a file containing import statements the REPL should execute on startup in the
# bin directory.
imports_script="${bin}/imports.scala"

# Not sure what the right default is here: trying nonzero.
scala_exit_status=1
saved_stty=""

# restore stty settings (echo in particular)
function restoreSttySettings() {
  if [[ -n ${SCALA_RUNNER_DEBUG} ]]; then
    echo "restoring stty: ${saved_stty}"
  fi

  stty ${saved_stty}
  saved_stty=""
}

function onExit() {
  if [[ "${saved_stty}" != "" ]]; then
    restoreSttySettings
    exit ${scala_exit_status}
  fi
}

# to reenable echo if we are interrupted before completing.
trap onExit INT

# save terminal settings
saved_stty=$(stty -g 2>/dev/null)
# clear on error so we don't later try to restore them
if [[ ! $? ]]; then
  saved_stty=""
fi
if [[ -n ${SCALA_RUNNER_DEBUG} ]]; then
  echo "saved stty: ${saved_stty}"
fi

cygwin=false;
case "$(uname)" in
    CYGWIN*) cygwin=true ;;
esac

CYGWIN_JLINE_TERMINAL=
if ${cygwin}; then
    if [ "${OS}" = "Windows_NT" ] && cygpath -m .>/dev/null 2>/dev/null ; then
        format=mixed
    else
        format=windows
    fi
    WIBI_SHELL_CLASSPATH=`cygpath --path --$format "$WIBI_SHELL_CLASSPATH"`
    case "${TERM}" in
        rxvt* | xterm*)
            stty -icanon min 1 -echo
            CYGWIN_JLINE_TERMINAL="-Djline.terminal=scala.tools.jline.UnixTerminal"
        ;;
    esac
fi

[ -n "${JAVA_OPTS}" ] || JAVA_OPTS="-Xmx256M -Xms32M"

# break out -D and -J options and add them to JAVA_OPTS as well
# so they reach the underlying JVM in time to do some good.  The
# -D options will be available as system properties.
declare -a java_args
declare -a scala_args

# Don't use the bootstrap classloader.
CPSELECT="-classpath "

while [ $# -gt 0 ]; do
  case "$1" in
    -D*)
      # pass to scala as well: otherwise we lose it sometimes when we
      # need it, e.g. communicating with a server compiler.
      java_args=("${java_args[@]}" "$1")
      scala_args=("${scala_args[@]}" "$1")
      shift
      ;;
    -J*)
      # as with -D, pass to scala even though it will almost
      # never be used.
      java_args=("${java_args[@]}" "${1:2}")
      scala_args=("${scala_args[@]}" "$1")
      shift
      ;;
    -toolcp)
      TOOL_CLASSPATH="$TOOL_CLASSPATH:$2"
      shift 2
      ;;
    *)
      scala_args=("${scala_args[@]}" "$1")
      shift
      ;;
  esac
done

# reset "$@" to the remaining args
set -- "${scala_args[@]}"

if [ -z "${JAVACMD}" -a -n "${JAVA_HOME}" -a -x "${JAVA_HOME}/bin/java" ]; then
  JAVACMD="${JAVA_HOME}/bin/java"
fi

"${JAVACMD:=java}" \
  ${JAVA_OPTS} \
  "${java_args[@]}" \
  ${CPSELECT}"${TOOL_CLASSPATH}:${EXPRESS_CP}" \
  -Dscala.usejavacp=true \
  -Denv.emacs="${EMACS}" \
  -Dtmpjars="${TMPJARS}" \
  ${CYGWIN_JLINE_TERMINAL} \
  ${main_class} ${@} \
  -i "${imports_script}" \
  -i "${EXPRESS_MODE}" \
  -Yrepl-sync
# The -Yrepl-sync option is a fix for the 2.9.1 REPL. This should probably not be necessary in the future.

# record the exit status lest it be overwritten:
# then reenable echo and propagate the code.
scala_exit_status=$?
onExit
