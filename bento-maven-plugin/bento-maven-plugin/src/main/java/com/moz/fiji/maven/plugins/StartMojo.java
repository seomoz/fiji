/**
 * (c) Copyright 2014 WibiData, Inc.
 *
 * See the NOTICE file distributed with this work for additional
 * information regarding copyright ownership.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.moz.fiji.maven.plugins;

import java.io.File;
import java.io.IOException;
import java.util.concurrent.ExecutionException;

import com.google.common.base.Optional;
import com.google.common.io.Files;
import org.apache.maven.plugin.AbstractMojo;
import org.apache.maven.plugin.MojoExecutionException;
import org.apache.maven.plugins.annotations.LifecyclePhase;
import org.apache.maven.plugins.annotations.Mojo;
import org.apache.maven.plugins.annotations.Parameter;

/**
 * Maven goal for starting Bento cluster.
 */
@Mojo(
    name = "start",
    defaultPhase = LifecyclePhase.PRE_INTEGRATION_TEST
)
public final class StartMojo extends AbstractMojo {
  /**
   * Address of the docker daemon to manage bento instances with.
   */
  @Parameter(
      property = "bento.docker.address",
      alias = "bento.docker.address",
      required = false
  )
  private String mDockerAddress;

  /**
   * If true, this goal should be a no-op.
   */
  @Parameter(
      property = "bento.skip",
      alias = "bento.skip",
      defaultValue = "false",
      required = false
  )
  private boolean mSkip;

  /**
   * The directory that will store all the configuration *-site.xml files required to connect to
   * HBase, HDFS, and the other Bento cluster components. These files will be generated by the goal.
   *
   * Places *-site.xml files in the maven's test classes directory so that they are on the classpath
   * of the test runner.
   */
  @Parameter(
      property = "bento.config.dir",
      alias = "bento.config.dir",
      defaultValue = "${project.build.testOutputDirectory}/",
      required = true
  )
  private File mBentoConfigDir;

  /**
   * Optional bento instance name override. Can be used to use an existing bento instance.
   */
  @Parameter(
      property = "bento.name",
      alias = "bento.name",
      required = false
  )
  private String mBentoName;

  /**
   * Python venv root to install the bento cluster to.
   */
  @Parameter(
      property = "bento.venv",
      alias = "bento.venv",
      defaultValue = "${project.build.directory}/bento-maven-plugin-venv",
      required = false
  )
  private File mBentoVenvRoot;

  /**
   * If true, skips creating the bento instance. Should be used in conjunction with an externally
   * created bento instance through the "bento.name" property.
   */
  @Parameter(
      property = "bento.skip.create",
      alias = "bento.skip.create",
      defaultValue = "false",
      required = false
  )
  private boolean mSkipBentoCreate;

  /**
   * If true, skips starting the bento instance. Should be used in conjunction with an externally
   * created and started bento instance through the "bento.name" property.
   */
  @Parameter(
      property = "bento.skip.start",
      alias = "bento.skip.start",
      defaultValue = "false",
      required = false
  )
  private boolean mSkipBentoStart;

  /**
   * The version of the hadoop/hbase stack to run in the bento cluster.
   */
  @Parameter(
      property = "bento.platform",
      alias = "bento.platform",
      required = false
  )
  private String mPlatformVersion;

  /**
   * Pypi repository to install fiji-bento-cluster from.
   */
  @Parameter(
      property = "bento.pypi.repository",
      alias = "bento.pypi.repository",
      required = false
  )
  private String mPypiRepository;

  /**
   * Time to wait for the bento cluster to start.
   */
  @Parameter(
      property = "bento.timeout.start",
      alias = "bento.timeout.start",
      required = false
  )
  // This is a Long so that it will be set to null if this flag is not provided.
  private Long mTimeout;

  /**
   * Interval at which to poll the bento cluster's status when starting or stopping it.
   */
  @Parameter(
      property = "bento.timeout.interval",
      alias = "bento.timeout.interval",
      required = false
  )
  // This is a Long so that it will be set to null if this flag is not provided.
  private Long mPollInterval;

  /**
   * Generate name for Bento cluster container. Bento name is simply the current timestamp. The
   * underlying container's name has "bento-maven-plugin-" prepended to this timestamp.
   *
   * @return name for Bento cluster container.
   */
  private static String generateBentoName() {
    return String.format("bento-maven-plugin-%d", System.currentTimeMillis());
  }

  /**
   * Default constructor for reflection.
   */
  public StartMojo() { }

  // We're going to use a bunch of parameters here just for the purpose of a test.
  // CSOFF: ParameterNumber
  /**
   * Constructor for tests.
   *
   * @param dockerAddress flag.
   * @param skip flag.
   * @param bentoConfigDir flag.
   * @param bentoName flag.
   * @param bentoVenvRoot flag.
   * @param skipBentoCreate flag.
   * @param skipBentoStart flag.
   * @param platformVersion flag.
   * @param pypiRepository flag.
   * @param timeout flag.
   * @param pollInterval flag.
   */
  public StartMojo(
      final String dockerAddress,
      final boolean skip,
      final File bentoConfigDir,
      final String bentoName,
      final File bentoVenvRoot,
      final boolean skipBentoCreate,
      final boolean skipBentoStart,
      final String platformVersion,
      final String pypiRepository,
      final Long timeout,
      final Long pollInterval
  ) {
    mDockerAddress = dockerAddress;
    mSkip = skip;
    mBentoConfigDir = bentoConfigDir;
    mBentoName = bentoName;
    mBentoVenvRoot = bentoVenvRoot;
    mSkipBentoCreate = skipBentoCreate;
    mSkipBentoStart = skipBentoStart;
    mPlatformVersion = platformVersion;
    mPypiRepository = pypiRepository;
    mTimeout = timeout;
    mPollInterval = pollInterval;
  }
  // CSON: ParameterNumber

  /**
   * Starts the Bento cluster container in a new thread.
   *
   * <p>This method is called by the maven plugin framework to run the goal.</p>
   *
   * @throws MojoExecutionException If there is a fatal error during this goal's execution.
   */
  public void execute() throws MojoExecutionException {
    if (mSkip) {
      getLog().info("Not starting a Bento cluster because bento.skip=true.");
      return;
    }

    if (mSkipBentoStart) {
      getLog().info("Not starting a Bento cluster because bento.skip.start=true.");
      return;
    }

    // Start the cluster.
    final File configDir = Files.createTempDir();
    BentoCluster.setInstance(
        // If the user hasn't supplied an override, generate a random name.
        mBentoName == null ? generateBentoName() : mBentoName,
        mBentoVenvRoot,
        mDockerAddress == null ? BentoCluster.getDockerAddress() : mDockerAddress,
        getLog()
    );
    try {
      BentoCluster.getInstance().start(
          configDir,
          !mSkipBentoCreate,
          Optional.fromNullable(mPlatformVersion),
          Optional.fromNullable(mPypiRepository),
          Optional.fromNullable(mTimeout),
          Optional.fromNullable(mPollInterval)
      );
    } catch (final IOException ioe) {
      throw new MojoExecutionException("Failed to start bento cluster", ioe);
    } catch (final ExecutionException ee) {
      throw new MojoExecutionException("Failed to start bento cluster", ee);
    }

    BentoCluster.getInstance().copySiteFiles(configDir, mBentoConfigDir);
  }
}
